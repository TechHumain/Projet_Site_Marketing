generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum ConsentDecision {
  ACCEPT
  REJECT
  CUSTOM
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  consentEvents  ConsentEvent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @map("refresh_token")
  refresh_token_expires_in Int? @map("refresh_token_expires_in")
  access_token       String?  @map("access_token")
  expires_at         Int?     @map("expires_at")
  token_type         String?  @map("token_type")
  scope              String?
  id_token           String?  @map("id_token")
  session_state      String?  @map("session_state")
  oauth_token_secret String?  @map("oauth_token_secret")
  oauth_token        String?  @map("oauth_token")
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ConsentEvent {
  id         String           @id @default(cuid())
  userId     String?
  categories Json
  decision   ConsentDecision
  ip         String?
  ua         String?
  createdAt  DateTime         @default(now())
  user       User?            @relation(fields: [userId], references: [id], onDelete: SetNull)
}
